/****************************************************************************
 *
 *   Copyright (c) 2013-2017 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file auv_att_control_main.cpp
 * AUV attitude controller.
 *
 *
 *
 * @author Lam-Hung NGUYEN		<lamhung81@gmail.com>
 *
 *
 */

// include:..........

//#include <conversion/rotation.h>
//#include <drivers/drv_hrt.h>
//#include <lib/geo/geo.h>
//#include <lib/mathlib/mathlib.h>
//#include <lib/tailsitter_recovery/tailsitter_recovery.h>
//#include <px4_config.h>
//#include <px4_defines.h>
//#include <px4_posix.h>
//#include <px4_tasks.h>
//#include <systemlib/circuit_breaker.h>
//#include <systemlib/err.h>
//#include <systemlib/param/param.h>
//#include <systemlib/perf_counter.h>
//#include <systemlib/systemlib.h>
//#include <uORB/topics/actuator_armed.h>
//#include <uORB/topics/actuator_controls.h>
//#include <uORB/topics/battery_status.h>
//#include <uORB/topics/control_state.h>
//#include <uORB/topics/manual_control_setpoint.h>
//#include <uORB/topics/mc_att_ctrl_status.h>
//#include <uORB/topics/multirotor_motor_limits.h>
//#include <uORB/topics/parameter_update.h>
//#include <uORB/topics/sensor_correction.h>
//#include <uORB/topics/sensor_gyro.h>
//#include <uORB/topics/vehicle_attitude_setpoint.h>
//#include <uORB/topics/vehicle_control_mode.h>
//#include <uORB/topics/vehicle_rates_setpoint.h>
//#include <uORB/topics/vehicle_status.h>
//#include <uORB/uORB.h>
//
///**
// * AUV attitude control app start / stop handling function
// *
// * @ingroup apps
// */
//extern "C" __EXPORT int auv_att_control_main(int argc, char *argv[]);
//
//
////define: ................
//
//#define YAW_DEADZONE	0.05f
//#define MIN_TAKEOFF_THRUST    0.2f
//#define TPA_RATE_LOWER_LIMIT 0.05f
//#define MANUAL_THROTTLE_MAX_MULTICOPTER	0.9f
//#define ATTITUDE_TC_DEFAULT 0.2f
//
//#define AXIS_INDEX_ROLL 0
//#define AXIS_INDEX_PITCH 1
//#define AXIS_INDEX_YAW 2
//#define AXIS_COUNT 3
//
//#define MAX_GYRO_COUNT 3

/////////////////////////////////////////////////////////////////////////////
#include <px4_config.h>
#include <px4_tasks.h>
#include <px4_posix.h>
#include <px4_getopt.h>
#include <px4_defines.h>
#include <px4_log.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <fcntl.h>
#include <poll.h>
#include <sys/ioctl.h>
#include <sys/stat.h>

#ifdef __PX4_NUTTX
#include <nuttx/fs/ioctl.h>
#endif

#include <arch/board/board.h>

#include "systemlib/systemlib.h"
#include "systemlib/err.h"
#include "systemlib/param/param.h"
#include "drivers/drv_pwm_output.h"

#include <uORB/uORB.h>
#include <uORB/topics/vehicle_rates_setpoint.h>



/////////////////////////////////////////////////////////////////////////////


extern "C" __EXPORT int auv_att_control_main(int argc, char *argv[]);





class AUVAttitudeControl
{
public:
	/**
	 * Constructor
	 */
	AUVAttitudeControl();

	/**
	 * Destructor, also kills the main task
	 */
	~AUVAttitudeControl();

	/**
	 * Start the AUV attitude control task.
	 *
	 * @return		OK on success.
	 */
	int		start();

private:
	int		_v_att_sp_sub;			/**< vehicle attitude setpoint subscription */
	int		_v_rates_sp_sub;		/**< vehicle rates setpoint subscription */

	struct vehicle_attitude_setpoint_s	_v_att_sp;			/**< vehicle attitude setpoint */
	struct vehicle_rates_setpoint_s		_v_rates_sp;		/**< vehicle rates setpoint */

	math::Vector<3>		_rates_prev;	/**< angular rates on previous step */
	math::Vector<3>		_rates_sp_prev; /**< previous rates setpoint */
	math::Vector<3>		_rates_sp;		/**< angular rates setpoint */
	math::Vector<3>		_rates_int;		/**< angular rates integral error */
	float				_thrust_sp;		/**< thrust setpoint */

	struct {
			param_t roll_p;
			param_t roll_rate_p;
			param_t roll_rate_i;
			param_t roll_rate_integ_lim;
			param_t roll_rate_d;
			param_t roll_rate_ff;
			param_t pitch_p;
			param_t pitch_rate_p;
			param_t pitch_rate_i;
			param_t pitch_rate_integ_lim;
			param_t pitch_rate_d;
			param_t pitch_rate_ff;
			param_t tpa_breakpoint_p;
			param_t tpa_breakpoint_i;
			param_t tpa_breakpoint_d;
			param_t tpa_rate_p;
			param_t tpa_rate_i;
			param_t tpa_rate_d;
			param_t yaw_p;
			param_t yaw_rate_p;
			param_t yaw_rate_i;
			param_t yaw_rate_integ_lim;
			param_t yaw_rate_d;
			param_t yaw_rate_ff;
			param_t yaw_ff;
			param_t roll_rate_max;
			param_t pitch_rate_max;
			param_t yaw_rate_max;
			param_t yaw_auto_max;

			param_t acro_roll_max;
			param_t acro_pitch_max;
			param_t acro_yaw_max;
			param_t rattitude_thres;

			param_t vtol_type;
			param_t roll_tc;
			param_t pitch_tc;
			param_t vtol_opt_recovery_enabled;
			param_t vtol_wv_yaw_rate_scale;

			param_t bat_scale_en;

			param_t board_rotation;

			param_t board_offset[3];

		}		_params_handles;		/**< handles for interesting parameters */



		struct {
				math::Vector<3> att_p;					/**< P gain for angular error */
				math::Vector<3> rate_p;				/**< P gain for angular rate error */
				math::Vector<3> rate_i;				/**< I gain for angular rate error */
				math::Vector<3> rate_int_lim;			/**< integrator state limit for rate loop */
				math::Vector<3> rate_d;				/**< D gain for angular rate error */
				math::Vector<3>	rate_ff;			/**< Feedforward gain for desired rates */
				float yaw_ff;						/**< yaw control feed-forward */

				float tpa_breakpoint_p;				/**< Throttle PID Attenuation breakpoint */
				float tpa_breakpoint_i;				/**< Throttle PID Attenuation breakpoint */
				float tpa_breakpoint_d;				/**< Throttle PID Attenuation breakpoint */
				float tpa_rate_p;					/**< Throttle PID Attenuation slope */
				float tpa_rate_i;					/**< Throttle PID Attenuation slope */
				float tpa_rate_d;					/**< Throttle PID Attenuation slope */

				float roll_rate_max;
				float pitch_rate_max;
				float yaw_rate_max;
				float yaw_auto_max;
				math::Vector<3> mc_rate_max;		/**< attitude rate limits in stabilized modes */
				math::Vector<3> auto_rate_max;		/**< attitude rate limits in auto modes */
				math::Vector<3> acro_rate_max;		/**< max attitude rates in acro mode */
				float rattitude_thres;
				int vtol_type;						/**< 0 = Tailsitter, 1 = Tiltrotor, 2 = Standard airframe */
				bool vtol_opt_recovery_enabled;
				float vtol_wv_yaw_rate_scale;			/**< Scale value [0, 1] for yaw rate setpoint  */

				int bat_scale_en;

				int board_rotation;

				float board_offset[3];

			}		_params;

			/**
				 * Update our local parameter cache.
				 */
				int			parameters_update();

				/**
				 * Check for parameter update and handle it.
				 */
				void		parameter_update_poll();

				/**
					 * Check for rates setpoint updates.
					 */
					void		vehicle_rates_setpoint_poll();

};


namespace auv_att_control
{

AUVAttitudeControl	*g_control;
}



AUVAttitudeControl::AUVAttitudeControl()
{

	}
AUVAttitudeControl::~AUVAttitudeControl()
{
	//debug lhnguyen: can phai viet destructor, for deleting memory
	mc_att_control::g_control = nullptr;

	}






void
MulticopterAttitudeControl::vehicle_rates_setpoint_poll()
{
	/* check if there is a new setpoint */
	bool updated;
	orb_check(_v_rates_sp_sub, &updated);

	if (updated) {
		orb_copy(ORB_ID(vehicle_rates_setpoint), _v_rates_sp_sub, &_v_rates_sp);
	}
}


//int
//AUVAttitudeControl::parameters_update()
//{

//}


/**
 * Attitude controller.
 * Input: 'vehicle_attitude_setpoint' topics (depending on mode)
 * Output: '_rates_sp' vector, '_thrust_sp'
 */
//void
//AUVAttitudeControl::control_attitude(float dt)
//{
//}

//void
//AUVAttitudeControl::task_main()
//{
//Flying with USB is not safe
//}
// nsh: mc_att_control: command not found
// default PWM output device

//error finding param: FW_ARSP_MODE
//nsh: mc_att_control: command not found
//


void
AUVAttitudeControl::task_main_trampoline(int argc, char *argv[])
{
	auv_att_control::g_control->task_main();
}

void
AUVAttitudeControl::task_main()
{

	/*
	 * do subscriptions
	 */
	_v_att_sp_sub = orb_subscribe(ORB_ID(vehicle_attitude_setpoint));
	_v_rates_sp_sub = orb_subscribe(ORB_ID(vehicle_rates_setpoint));



	/* initialize parameters cache */
	parameters_update();

	/* wakeup source: gyro data from sensor selected by the sensor app */
	px4_pollfd_struct_t poll_fds = {};
	poll_fds.events = POLLIN;

	while (!_task_should_exit) {

		poll_fds.fd = _sensor_gyro_sub[_selected_gyro];

		/* wait for up to 100ms for data */
		int pret = px4_poll(&poll_fds, 1, 100);

		/* timed out - periodic check for _task_should_exit */
		if (pret == 0) {
			continue;
		}

		/* this is undesirable but not much we can do - might want to flag unhappy status */
		if (pret < 0) {
			warn("mc att ctrl: poll error %d, %d", pret, errno);
			/* sleep a bit before next try */
			usleep(100000);
			continue;
		}

		perf_begin(_loop_perf);

		/* run controller on gyro changes */
		if (poll_fds.revents & POLLIN) {
			static uint64_t last_run = 0;
			float dt = (hrt_absolute_time() - last_run) / 1000000.0f;
			last_run = hrt_absolute_time();

			/* guard against too small (< 2ms) and too large (> 20ms) dt's */
			if (dt < 0.002f) {
				dt = 0.002f;

			} else if (dt > 0.02f) {
				dt = 0.02f;
			}

			/* copy gyro data */
			orb_copy(ORB_ID(sensor_gyro), _sensor_gyro_sub[_selected_gyro], &_sensor_gyro);

			/* check for updates in other topics */
			parameter_update_poll();
			vehicle_control_mode_poll();
			arming_status_poll();
			vehicle_manual_poll();
			vehicle_status_poll();
			vehicle_motor_limits_poll();
			battery_status_poll();
			control_state_poll();
			sensor_correction_poll();

			/* Check if we are in rattitude mode and the pilot is above the threshold on pitch
			 * or roll (yaw can rotate 360 in normal att control).  If both are true don't
			 * even bother running the attitude controllers */
			if (_v_control_mode.flag_control_rattitude_enabled) {
				if (fabsf(_manual_control_sp.y) > _params.rattitude_thres ||
				    fabsf(_manual_control_sp.x) > _params.rattitude_thres) {
					_v_control_mode.flag_control_attitude_enabled = false;
				}
			}

			if (_v_control_mode.flag_control_attitude_enabled) {

				if (_ts_opt_recovery == nullptr) {
					// the  tailsitter recovery instance has not been created, thus, the vehicle
					// is not a tailsitter, do normal attitude control
					control_attitude(dt);

				} else {
					vehicle_attitude_setpoint_poll();
					_thrust_sp = _v_att_sp.thrust;
					math::Quaternion q(_ctrl_state.q[0], _ctrl_state.q[1], _ctrl_state.q[2], _ctrl_state.q[3]);
					math::Quaternion q_sp(&_v_att_sp.q_d[0]);
					_ts_opt_recovery->setAttGains(_params.att_p, _params.yaw_ff);
					_ts_opt_recovery->calcOptimalRates(q, q_sp, _v_att_sp.yaw_sp_move_rate, _rates_sp);

					/* limit rates */
					for (int i = 0; i < 3; i++) {
						_rates_sp(i) = math::constrain(_rates_sp(i), -_params.mc_rate_max(i), _params.mc_rate_max(i));
					}
				}

				/* publish attitude rates setpoint */
				_v_rates_sp.roll = _rates_sp(0);
				_v_rates_sp.pitch = _rates_sp(1);
				_v_rates_sp.yaw = _rates_sp(2);
				_v_rates_sp.thrust = _thrust_sp;
				_v_rates_sp.timestamp = hrt_absolute_time();

				if (_v_rates_sp_pub != nullptr) {
					orb_publish(_rates_sp_id, _v_rates_sp_pub, &_v_rates_sp);

				} else if (_rates_sp_id) {
					_v_rates_sp_pub = orb_advertise(_rates_sp_id, &_v_rates_sp);
				}

				//}

			} else {
				/* attitude controller disabled, poll rates setpoint topic */
				if (_v_control_mode.flag_control_manual_enabled) {
					/* manual rates control - ACRO mode */
					_rates_sp = math::Vector<3>(_manual_control_sp.y, -_manual_control_sp.x,
								    _manual_control_sp.r).emult(_params.acro_rate_max);
					_thrust_sp = math::min(_manual_control_sp.z, MANUAL_THROTTLE_MAX_MULTICOPTER);

					/* publish attitude rates setpoint */
					_v_rates_sp.roll = _rates_sp(0);
					_v_rates_sp.pitch = _rates_sp(1);
					_v_rates_sp.yaw = _rates_sp(2);
					_v_rates_sp.thrust = _thrust_sp;
					_v_rates_sp.timestamp = hrt_absolute_time();

					if (_v_rates_sp_pub != nullptr) {
						orb_publish(_rates_sp_id, _v_rates_sp_pub, &_v_rates_sp);

					} else if (_rates_sp_id) {
						_v_rates_sp_pub = orb_advertise(_rates_sp_id, &_v_rates_sp);
					}

				} else {
					/* attitude controller disabled, poll rates setpoint topic */
					vehicle_rates_setpoint_poll();
					_rates_sp(0) = _v_rates_sp.roll;
					_rates_sp(1) = _v_rates_sp.pitch;
					_rates_sp(2) = _v_rates_sp.yaw;
					_thrust_sp = _v_rates_sp.thrust;
				}
			}

			if (_v_control_mode.flag_control_rates_enabled) {
				control_attitude_rates(dt);

				/* publish actuator controls */
				_actuators.control[0] = (PX4_ISFINITE(_att_control(0))) ? _att_control(0) : 0.0f;
				_actuators.control[1] = (PX4_ISFINITE(_att_control(1))) ? _att_control(1) : 0.0f;
				_actuators.control[2] = (PX4_ISFINITE(_att_control(2))) ? _att_control(2) : 0.0f;
				_actuators.control[3] = (PX4_ISFINITE(_thrust_sp)) ? _thrust_sp : 0.0f;
				_actuators.control[7] = _v_att_sp.landing_gear;
				_actuators.timestamp = hrt_absolute_time();
				_actuators.timestamp_sample = _ctrl_state.timestamp;

				/* scale effort by battery status */
				if (_params.bat_scale_en && _battery_status.scale > 0.0f) {
					for (int i = 0; i < 4; i++) {
						_actuators.control[i] *= _battery_status.scale;
					}
				}

				_controller_status.roll_rate_integ = _rates_int(0);
				_controller_status.pitch_rate_integ = _rates_int(1);
				_controller_status.yaw_rate_integ = _rates_int(2);
				_controller_status.timestamp = hrt_absolute_time();

				if (!_actuators_0_circuit_breaker_enabled) {
					if (_actuators_0_pub != nullptr) {

						orb_publish(_actuators_id, _actuators_0_pub, &_actuators);
						perf_end(_controller_latency_perf);

					} else if (_actuators_id) {
						_actuators_0_pub = orb_advertise(_actuators_id, &_actuators);
					}

				}

				/* publish controller status */
				if (_controller_status_pub != nullptr) {
					orb_publish(ORB_ID(mc_att_ctrl_status), _controller_status_pub, &_controller_status);

				} else {
					_controller_status_pub = orb_advertise(ORB_ID(mc_att_ctrl_status), &_controller_status);
				}
			}

			if (_v_control_mode.flag_control_termination_enabled) {
				if (!_vehicle_status.is_vtol) {

					_rates_sp.zero();
					_rates_int.zero();
					_thrust_sp = 0.0f;
					_att_control.zero();


					/* publish actuator controls */
					_actuators.control[0] = 0.0f;
					_actuators.control[1] = 0.0f;
					_actuators.control[2] = 0.0f;
					_actuators.control[3] = 0.0f;
					_actuators.timestamp = hrt_absolute_time();
					_actuators.timestamp_sample = _ctrl_state.timestamp;

					if (!_actuators_0_circuit_breaker_enabled) {
						if (_actuators_0_pub != nullptr) {

							orb_publish(_actuators_id, _actuators_0_pub, &_actuators);
							perf_end(_controller_latency_perf);

						} else if (_actuators_id) {
							_actuators_0_pub = orb_advertise(_actuators_id, &_actuators);
						}
					}

					_controller_status.roll_rate_integ = _rates_int(0);
					_controller_status.pitch_rate_integ = _rates_int(1);
					_controller_status.yaw_rate_integ = _rates_int(2);
					_controller_status.timestamp = hrt_absolute_time();

					/* publish controller status */
					if (_controller_status_pub != nullptr) {
						orb_publish(ORB_ID(mc_att_ctrl_status), _controller_status_pub, &_controller_status);

					} else {
						_controller_status_pub = orb_advertise(ORB_ID(mc_att_ctrl_status), &_controller_status);
					}

					/* publish attitude rates setpoint */
					_v_rates_sp.roll = _rates_sp(0);
					_v_rates_sp.pitch = _rates_sp(1);
					_v_rates_sp.yaw = _rates_sp(2);
					_v_rates_sp.thrust = _thrust_sp;
					_v_rates_sp.timestamp = hrt_absolute_time();

					if (_v_rates_sp_pub != nullptr) {
						orb_publish(_rates_sp_id, _v_rates_sp_pub, &_v_rates_sp);

					} else if (_rates_sp_id) {
						_v_rates_sp_pub = orb_advertise(_rates_sp_id, &_v_rates_sp);
					}
				}
			}
		}

		perf_end(_loop_perf);
	}

	_control_task = -1;
}

int
AUVAttitudeControl::start()
{
	ASSERT(_control_task == -1);

	/* start the task */
	_control_task = px4_task_spawn_cmd("auv_att_control",
					   SCHED_DEFAULT,
					   SCHED_PRIORITY_MAX - 5,
					   1700,
					   (px4_main_t)&AUVAttitudeControl::task_main_trampoline,
					   nullptr);

	if (_control_task < 0) {
		warn("task start failed");
		return -errno;
	}

	return OK;
}

/*

int
AUVAttitudeControl::start()
{

	//subcribe to set_attitude_target topic
	int vehicle_rates_setpoint_sub_fd = orb_subscribe(ORB_ID(vehicle_rates_setpoint));
	// limit the update rate to 5 Hz
		orb_set_interval(vehicle_rates_setpoint_sub_fd, 200);

		struct vehicle_rates_setpoint_s raw;
		memset(&raw, 0, sizeof(raw));
		//copy sensors raw data into local buffer
		orb_copy(ORB_ID(vehicle_rates_setpoint), vehicle_rates_setpoint_sub_fd, &raw);
		PX4_INFO("Debug Value received from Mavlink:\t%8.4f\t%8.4f\t%8.4f\t%8.4f",
							 (double)raw.roll,
							 (double)raw.pitch,
							 (double)raw.yaw,
							 (double)raw.thrust);




	const char *dev = PWM_OUTPUT0_DEVICE_PATH;

	// open for ioctl only
	int fd = px4_open(dev, 0);
	if (fd < 0) {
			PX4_ERR("can't open %s", dev);
			return 1;
		}


	int ret;
	int pwm_value;
	pwm_value = 1400;

	while (1) {
			//for (unsigned i = 0; i < 8; i++) {
		    { int i; i = 0;
		       {
					PX4_INFO("PWM_VALUE  %5d", pwm_value);
		    		ret = px4_ioctl(fd, PWM_SERVO_SET(i), pwm_value);

					if (ret != OK) {
						PX4_ERR("PWM_SERVO_SET(%d)", i);
						return 1;
					}
				}
		       pwm_value +=1;
		       if (pwm_value >= 1600) {
		    	   pwm_value = 1400;
		       }
			}

				// Delay longer than the max Oneshot duration

			usleep(2542*100); //micro second

#ifdef __PX4_NUTTX
			// Trigger all timer's channels in Oneshot mode to fire
			// the oneshots with updated values.


			up_pwm_update();
#endif
		}






}

*/

int auv_att_control_main(int argc, char *argv[])
{
	if (argc < 2) {
		warnx("usage: auv_att_control {start|stop|status}");
		return 1;
	}

	if (!strcmp(argv[1], "start")) {

		if (auv_att_control::g_control != nullptr) {
			warnx("already running");
			return 1;
		}

		auv_att_control::g_control = new AUVAttitudeControl;

		if (auv_att_control::g_control == nullptr) {
			warnx("alloc failed");
			return 1;
		}

		if (OK != auv_att_control::g_control->start()) {
			delete auv_att_control::g_control;
			auv_att_control::g_control = nullptr;
			warnx("start failed");
			return 1;
		}

		return 0;
	}

	if (!strcmp(argv[1], "stop")) {
		if (auv_att_control::g_control == nullptr) {
			warnx("not running");
			return 1;
		}

		delete auv_att_control::g_control;
		auv_att_control::g_control = nullptr;
		return 0;
	}

	if (!strcmp(argv[1], "status")) {
		if (auv_att_control::g_control) {
			warnx("running");
			return 0;

		} else {
			warnx("not running");
			return 1;
		}
	}

	warnx("unrecognized command");
	return 1;
}
